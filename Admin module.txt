package com.example.entity;

import javax.persistence.*;

import com.example.Enum.Role;

@Entity
@Table(name="adminUsers")
public class AdminUser {
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;
	
	private String name;
	
	@Column(unique=true)
	private String email;
	private Role role;
	
	private boolean active=true;
    private boolean blocked = false;
	
	public AdminUser(Long id,String name,String email,Role role,boolean active,boolean blocked) {
		this.id=id;
		this.name=name;
		this.email=email;
		this.role = role;
		this.active=active;
		this.blocked=blocked;
		
	}
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}
	public boolean isActive() {
		return active;
	}
	public void setActive(boolean active) {
		this.active = active;
	}
	public boolean isBlocked() {
		return blocked;
	}
	public void setBlocked(boolean blocked) {
		this.blocked = blocked;
	}

	
	
	


}
----------------------------------

package com.example.DTO;

import com.example.Enum.Role;

public class AdminUserDTO {
	
	public Long id;
	public String name;
	public String email;
	public Role role;
	public boolean active;
	public boolean blocked;
	
	public AdminUserDTO() {}
	public AdminUserDTO(Long id,String name,String email,Role role,boolean active,boolean blocked) {
		
		this.id=id;
		this.name=name;
		this.email=email;
		this.role=role;
		this.active=active;
		this.blocked=blocked;
	}

}
-----------------------------
package com.example.repositoty;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.Enum.Role;
import com.example.entity.AdminUser;


@Repository
public interface AdminUserRepository extends JpaRepository<AdminUser,Long>{
	AdminUser findByEmail(String email);
	List<AdminUser> findByRole(Role role);

}
-----------------------------------


package com.example.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.DTO.AdminUserDTO;
import com.example.Enum.Role;
import com.example.entity.AdminUser;
import com.example.repositoty.AdminUserRepository;


@Service
public class AdminUserService {
	
	@Autowired
	private AdminUserRepository adminUserRepository;
	
	public List<AdminUserDTO>getAllUsers(){
		return adminUserRepository.findAll().stream().map(this::toDTO).collect(Collectors.toList());
	}

	
	public AdminUserDTO blockUser(Long id) {
		AdminUser user = adminUserRepository.findById(id).orElse(null);
		if(user != null) {
			user.setBlocked(true);
			adminUserRepository.save(user);
			return toDTO(user);
		}
		return null;
		
	}
	public AdminUserDTO unBlockUser(Long id) {
		AdminUser user = adminUserRepository.findById(id).orElse(null);
		if(user != null) {
			user.setBlocked(false);
		adminUserRepository.save(user);
		return toDTO(user);
		}
		return null;
	}
	
	public List<AdminUserDTO>getUserByRole(Role role){
		return adminUserRepository.findByRole(role).stream().map(this::toDTO).collect(Collectors.toList());
	}
	
	public AdminUserDTO upadateStatus(Long id,boolean isActive) {
		AdminUser user = adminUserRepository.findById(id).orElse(null);
		if (user==null)throw new RuntimeException("User not found"); 	
		user.setActive(isActive);
		adminUserRepository.save(user);
		return toDTO(user);
	}
	
	private AdminUserDTO toDTO(AdminUser admin) {
		return new AdminUserDTO(
				admin.getId(),
				admin.getName(),
				admin.getEmail(),
				admin.getRole(),
				admin.isActive(),
				admin.isBlocked());
	}
}
------------------------------------------


package com.example.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.DTO.AdminUserDTO;
import com.example.Enum.Role;
import com.example.service.AdminUserService;

@RestController
@RequestMapping("/api/admins")
public class AdminController {
	
	
	@Autowired
	private AdminUserService adminUserService;

	
	@GetMapping("/users")
	public ResponseEntity<List<AdminUserDTO>>getAllUsers(){
		return ResponseEntity.ok(adminUserService.getAllUsers());
	}
	@GetMapping("/role/{role}")
	public ResponseEntity<List<AdminUserDTO>>getByRole(@PathVariable Role role){
		return ResponseEntity.ok(adminUserService.getUserByRole(role));
	}
	
	@PutMapping("/{id}/status")
	public ResponseEntity<AdminUserDTO>updateUserStatus(@RequestParam Long id, @RequestParam boolean active){
		return ResponseEntity.ok(adminUserService.upadateStatus(id, active));
	}
	@PutMapping("/{id}/block")
	public ResponseEntity<AdminUserDTO>blockUser(@PathVariable Long id){
		AdminUserDTO dto=adminUserService.blockUser(id);
		if(dto==null) {
		return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok(dto);
	}
	
	@PutMapping("/{id}/unBlock")
	public ResponseEntity<AdminUserDTO>unBlockUser(@PathVariable Long id){
		AdminUserDTO dto=adminUserService.blockUser(id);
		if(dto==null) {
		return ResponseEntity.notFound().build();
	    }
		return  ResponseEntity.ok(dto);
	
     }
}
