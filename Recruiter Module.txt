package com.example.entity;

import javax.persistence.*;

@Entity
@Table(name="recruiters")
public class Recruiter {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long id;
	private String name;
	private String email;
	private String companyName;
	private String phone;
	private String companyDescription;
	private String companyWebsite;
	
	
	public Recruiter() {}
	public Recruiter(Long id,String name,String email,String phone,String companyName,String companyDescription,String compantWebsite ) {
		this.id=id;
		this.name=name;
		this.email=email;
		this.phone=phone;
		this.companyName=companyName;
		this.companyDescription=companyDescription;
		this.companyWebsite=companyWebsite;
	}
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getCompanyName() {
		return companyName;
	}
	public void setCompanyName(String companyName) {
		this.companyName = companyName;
	}
	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}
	public String getCompanydescription() {
		return companyDescription;
	}
	public void setCompanydescription(String companydescription) {
		this.companyDescription = companydescription;
	}
	public String getCompantWebsite() {
		return companyWebsite;
	}
	public void setCompantWebsite(String compantWebsite) {
		this.companyWebsite = compantWebsite;
	}
	
	
	
	
	

}
--------------------------------


package com.example.DTO;

public class RecruiterDTO {
	
	public Long id;
	public String name;
	public String email;
	public String phone;
	public String companyName;
	public String companyDescription;
	public String companyWebsite;
	
	public RecruiterDTO(Long id,String name,String email,String phone,String companyName,String companyDescription,String companyWebsite) {
		this.id=id;
		this.name=name;
		this.email=name;
		this.phone=phone;
		this.companyName=companyName;
		this.companyDescription=companyDescription;
		this.companyWebsite=companyWebsite;
		
	}
	

}
-----------------------------------------------
package com.example.repositoty;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.entity.Recruiter;

@Repository
public interface RecruiterRepository extends JpaRepository<Recruiter, Long>{
	Recruiter findByEmail(String email);
	Optional<Recruiter> findById(Long id);

}
--------------------------------------
package com.example.service;


import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.DTO.RecruiterDTO;
import com.example.entity.Recruiter;
import com.example.repositoty.RecruiterRepository;

@Service
public class RecruiterService {
	
	@Autowired 
	private RecruiterRepository recruiterRepository;
	
	
	public RecruiterDTO createRecruiter(RecruiterDTO dto) {
		Recruiter recruiter = new Recruiter(dto.id,dto.name,dto.email,dto.phone,dto.companyName,dto.companyDescription,dto.companyWebsite);
		recruiter=recruiterRepository.save(recruiter);
		return new RecruiterDTO(
				recruiter.getId(),
				recruiter.getName(),
				recruiter.getEmail(),
				recruiter.getPhone(),
				recruiter.getCompanyName(),
				recruiter.getCompanydescription(),
				recruiter.getCompantWebsite());
	}

	public RecruiterDTO getRecruiterByEmail(String email) {
		Recruiter recruiter = recruiterRepository.findByEmail(email);
		if(recruiter == null)return null;
		return new RecruiterDTO(
				recruiter.getId(),
				recruiter.getName(),
				recruiter.getEmail(),
				recruiter.getPhone(),
				recruiter.getCompanyName(),
				recruiter.getCompanydescription(),
				recruiter.getCompantWebsite());
	}
	
	public RecruiterDTO getRecruiterById(Long id) {
		Optional<Recruiter> optionalRecruiter = recruiterRepository.findById(id);
		if(!optionalRecruiter.isPresent())return null;
		Recruiter recruiter =new Recruiter();
		return new RecruiterDTO(recruiter.getId(),
				recruiter.getName(),
				recruiter.getEmail(),
				recruiter.getPhone(),
				recruiter.getCompanyName(),
				recruiter.getCompanydescription(),
				recruiter.getCompantWebsite());
		
	}
}
--------------------------------------
package com.example.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.DTO.RecruiterDTO;
import com.example.service.RecruiterService;

@RestController
@RequestMapping("/api/recruiters")
public class RecruiterController {
	
	@Autowired
	private RecruiterService recruiterService;
	
	@PostMapping("/register")
	public ResponseEntity <RecruiterDTO> register(@RequestBody RecruiterDTO dto) {
		return ResponseEntity.ok(recruiterService.createRecruiter(dto));
	}
	@GetMapping("/{email}")
	public ResponseEntity<RecruiterDTO>getByEmail(@PathVariable String email){
		return ResponseEntity.ok(recruiterService.getRecruiterByEmail(email));
	}
	@GetMapping("/{id}")
	public ResponseEntity<RecruiterDTO>getById(@PathVariable Long id){
		return ResponseEntity.ok(recruiterService.getRecruiterById(id));
	}

}
-----------------------------------------
package com.example.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;


@Configuration
public class SecurityConfig {
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		
		http.csrf().disable()
		.authorizeRequests().
		antMatchers("/api/auth/**","/api/students/**","/api/recruiters/**").permitAll()
		.anyRequest().authenticated()
		.and()
		.sessionManagement()
		.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		
		return http.build();
		
	}
	
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }

}
